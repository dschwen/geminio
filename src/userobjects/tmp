11c11
< #include "GGroupTest.h"
---
> #include "GGroup.h"
14c14
< #define DEBUG 1
---
> #define DEBUG 0
17c17
< InputParameters validParams<GGroupTest>()
---
> InputParameters validParams<GGroup>()
31c31,32
<   params.addRequiredParam<Real>("temperature","[K], system temperature");
---
>   params.addParam<Real>("temperature","[K], system temperature");
>   params.addParam<FunctionName>("T_func","[K], system temperature as a function");
38c39
< GGroupTest::GGroupTest(const InputParameters & parameters) :
---
> GGroup::GGroup(const InputParameters & parameters) :
50c51,52
<     _T(getParam<Real>("temperature")),
---
>     _T(isParamValid("temperature")?getParam<Real>("temperature"):0.0),
>     _T_func(isParamValid("T_func")? &getFunction("T_func"):NULL),
57a60,61
>     if (!isParamValid("temperature") && !_T_func)
>         mooseError("Temperature should be provided");
78c82
< GGroupTest::~GGroupTest(){
---
> GGroup::~GGroup(){
88c92
< GGroupTest::initialize()
---
> GGroup::initialize()
104c108
< GGroupTest::setGroupScheme(){//total _Ng group, _Ng+1 node
---
> GGroup::setGroupScheme(){//total _Ng group, _Ng+1 node
211c215
< GGroupTest::updateGroupScheme(){
---
> GGroup::updateGroupScheme(){
220c224
< GGroupTest::execute()
---
> GGroup::execute()
227c231
< void GGroupTest::finalize()
---
> void GGroup::finalize()
233c237
< GGroupTest::_emit(int clustersize) const
---
> GGroup::_emit(int clustersize) const //[cr_start,cr_end)
235d238
<   printf("what the hell!\n");
238,241c241,250
<   if(clustersize<0) return 0.0; //don't consider emission of intersitital cluster
<   if(clustersize>0 && clustersize<=_v_size)
<       tagi = 1;
<   Real val = _material->emit(clustersize,1,_T,species,species,tagi,1);
---
>   if(clustersize>0){
>       if(clustersize<=_v_size)
>           tagi = 1;
>   }
>   else{
>       if(-clustersize<=_i_size)
>           tagi = 1;
>   }
>   Real T = _T_func? _T_func->value(_t,dummy):_T;
>   Real val = _material->emit((int)std::abs(clustersize),1,T,species,species,tagi,1);
247c256
< GGroupTest::_disl(int clustersize) const
---
> GGroup::_disl(int clustersize) const //[cr_start,cr_end)
249d257
<   return 0.0;
250a259
>   int tagi = 0;//denote mobility
252,253c261,271
<   if(clustersize>_v_size || -clustersize>_i_size) return 0.0; //immobile
<   val = _material->disl_ksq(std::abs(clustersize),species,_T,1);
---
>   Real T = _T_func? _T_func->value(_t,dummy):_T;
>   if(clustersize>0){
>     if(clustersize>_v_size) return 0.0;
>     tagi = 1;
>     val = _material->disl_ksq(clustersize,species,T,tagi);
>   }
>   else{
>     if(-clustersize>_i_size) return 0.0;
>     tagi = 1;
>     val = _material->disl_ksq(-clustersize,species,T,tagi);
>   }
259c277
< GGroupTest::_diff(int clustersize) const
---
> GGroup::_diff(int clustersize) const //[cr_start,cr_end)
261d278
<   return 0.0;
265,267c282,292
<   if(clustersize>_v_size || -clustersize>_i_size) return 0.0; //immobile
<   val = _material->diff(std::abs(clustersize),species,_T);
<  
---
>   Real T = _T_func? _T_func->value(_t,dummy):_T;
>   if(clustersize>0){
>     if(clustersize>_v_size) return 0.0;
>     tagi = 1;
>     val = _material->diff(clustersize,species,T);
>   }
>   else{
>     if(-clustersize>_i_size) return 0.0;
>     tagi = 1;
>     val = _material->diff(-clustersize,species,T);
>   }
273c298
< GGroupTest::_absorb(int clustersize1, int clustersize2) const 
---
> GGroup::_absorb(int clustersize1, int clustersize2) const //[ot_start,ot_end),[cr_start,cr_end)
275a301
>   Real T = _T_func? _T_func->value(_t,dummy):_T;
288c314
<     return _material->absorbVV(i,j,flag,_T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
---
>     return _material->absorbVV(i,j,flag,T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
298c324
<     return _material->absorbVI(i,j,flag,_T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
---
>     return _material->absorbVI(i,j,flag,T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
308c334
<     return _material->absorbVI(j,i,flag,_T);//flag=0: both immobile; flag=1: first mobile; flag=2: second mobile; flag=3: both mobile
---
>     return _material->absorbVI(j,i,flag,T);//flag=0: both immobile; flag=1: first mobile; flag=2: second mobile; flag=3: both mobile
318c344
<     return _material->absorbII(i,j,flag,_T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
---
>     return _material->absorbII(i,j,flag,T);//flag=0: i j immobile; flag=1: i mobile; flag=2: j mobile; flag=3: i j mobile
324c350
< GGroupTest::CurrentGroupV(int i) const{
---
> GGroup::CurrentGroupV(int i) const{
330c356
< GGroupTest::CurrentGroupI(int i) const{
---
> GGroup::CurrentGroupI(int i) const{
